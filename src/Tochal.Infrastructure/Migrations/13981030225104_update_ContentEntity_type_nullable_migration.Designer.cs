// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tochal.Infrastructure.DataLayer.Context;

namespace Tochal.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("13981030225104_update_ContentEntity_type_nullable_migration")]
    partial class update_ContentEntity_type_nullable_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankCities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName");

                    b.Property<int>("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("BankCities");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankEducationalField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankEducationalGradeId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BankEducationalGradeId");

                    b.ToTable("BankEducationalField");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankEducationalGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BankEducationalGrade");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankEducationalOrientation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankEducationalFieldId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("BankEducationalFieldId");

                    b.ToTable("BankEducationalOrientation");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankProvinces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProvinceName");

                    b.HasKey("Id");

                    b.ToTable("BankProvinces");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankUniversityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BankUniversityType");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Blog.ActionViewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ActionViewType");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Blog.ContentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogContentEntityType");

                    b.Property<string>("Content");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500);

                    b.Property<string>("MainImage");

                    b.Property<int?>("MainPageContentType");

                    b.Property<string>("MainVideo");

                    b.Property<int?>("MenuId");

                    b.Property<int?>("MenuTitleId");

                    b.Property<string>("ShortContent");

                    b.Property<int?>("Showlocation");

                    b.Property<int?>("SubMenuId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(300);

                    b.Property<string>("ThumbnailImage");

                    b.Property<string>("Title")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("MenuTitleId");

                    b.HasIndex("SubMenuId");

                    b.ToTable("ContentEntity");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Content.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt");

                    b.Property<int>("EntityId");

                    b.Property<string>("Image");

                    b.HasKey("Id");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.EvaluationAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("TochalId");

                    b.Property<int>("userId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("EvaluationAnswers");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.EvaluationQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answers");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("EvaluationQuestion");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.FooterColleague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FooterId");

                    b.Property<string>("Image");

                    b.Property<string>("Link");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("FooterColleague");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.FooterIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FooterId");

                    b.Property<string>("Link");

                    b.Property<string>("icon");

                    b.HasKey("Id");

                    b.ToTable("FooterIcon");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.FooterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("Logo");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("FooterInfo");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.AppDataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName");

                    b.Property<string>("XmlData");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyName")
                        .IsUnique()
                        .HasFilter("[FriendlyName] IS NOT NULL");

                    b.ToTable("AppDataProtectionKeys");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.AppLogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("EventId");

                    b.Property<string>("LogLevel");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("StateJson");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("AppLogItems");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.AppSqlCache", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(449);

                    b.Property<DateTimeOffset?>("AbsoluteExpiration");

                    b.Property<DateTimeOffset>("ExpiresAtTime");

                    b.Property<long?>("SlidingExpirationInSeconds");

                    b.Property<byte[]>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtTime")
                        .HasName("Index_ExpiresAtTime");

                    b.ToTable("AppSqlCache","dbo");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("ActiveIntershipNumber");

                    b.Property<string>("ActivityField");

                    b.Property<string>("Address");

                    b.Property<DateTimeOffset?>("BirthDate");

                    b.Property<string>("CallNumber");

                    b.Property<bool?>("CenterType");

                    b.Property<int?>("CityId");

                    b.Property<string>("CompanyConfirm");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(450);

                    b.Property<string>("CompanyNameEn")
                        .HasMaxLength(450);

                    b.Property<string>("CompanyNationalId");

                    b.Property<int?>("CompanyNationalMainId");

                    b.Property<string>("CompanyNationalMainName");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("EconomicalCode");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ExpertTochal");

                    b.Property<string>("FatherName");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName")
                        .HasMaxLength(450);

                    b.Property<bool?>("Gender");

                    b.Property<string>("IndustryRelationsManagerEmail");

                    b.Property<string>("IndustryRelationsManagerName");

                    b.Property<bool?>("IsAcceptCompany");

                    b.Property<bool?>("IsAcceptUniversity");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEmailPublic");

                    b.Property<bool?>("IsIrainian");

                    b.Property<string>("LastName")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("LastVisitDateTime");

                    b.Property<string>("Location");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ManagerName");

                    b.Property<string>("ManagingDirectorName");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("NationalCode");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("OldId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoFileName")
                        .HasMaxLength(450);

                    b.Property<int?>("ProvinceId");

                    b.Property<int?>("RandomCode");

                    b.Property<int?>("RelatedOn");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StartDate");

                    b.Property<string>("Tell");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UniManagerName");

                    b.Property<int?>("UniTypeId");

                    b.Property<string>("UniversityManagerName")
                        .HasMaxLength(450);

                    b.Property<string>("UniversityName")
                        .HasMaxLength(450);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.Property<string>("WebSite");

                    b.Property<int?>("industrialType");

                    b.Property<string>("registrationNumber");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UniTypeId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserUsedPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserUsedPasswords");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Menu.MenuEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int?>("DetailType");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(500);

                    b.Property<bool?>("HaveChaild");

                    b.Property<string>("Link");

                    b.Property<int>("PageType");

                    b.Property<int?>("ParentId");

                    b.Property<int>("Row");

                    b.Property<string>("ShortContent");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MenuEntity");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Ministry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ministry");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ShowDate");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.NotificationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead");

                    b.Property<int>("NotificationId");

                    b.Property<DateTime?>("ShowDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankMessage");

                    b.Property<string>("BankName");

                    b.Property<DateTime>("DatePayment");

                    b.Property<DateTime?>("DateTimePaid");

                    b.Property<int?>("EntityId");

                    b.Property<bool>("IsPaid");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductType");

                    b.Property<long>("RetrivalRefNo");

                    b.Property<string>("SystemTraceNo");

                    b.Property<string>("Token");

                    b.Property<string>("TransactionReferenceId");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Notice2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("CreatorUserId");

                    b.Property<int?>("EntityId");

                    b.Property<bool>("IsRead");

                    b.Property<int?>("RoutineId");

                    b.Property<int?>("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("RoutineId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Notice2");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PkColumnName")
                        .HasMaxLength(1024);

                    b.Property<string>("TableName")
                        .HasMaxLength(1024);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("Routine2");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Action", b =>
                {
                    b.Property<int>("RoutineId");

                    b.Property<int>("Step");

                    b.Property<string>("Action")
                        .HasMaxLength(32);

                    b.Property<string>("Color")
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDescriptionMultiline");

                    b.Property<bool>("IsDescriptionRequired");

                    b.Property<bool>("ShouldHideDescription");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.HasKey("RoutineId", "Step", "Action");

                    b.ToTable("Routine2Action");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Autodash", b =>
                {
                    b.Property<int>("RoutineId");

                    b.Property<int>("Step");

                    b.Property<int>("ToStep");

                    b.Property<int>("TimeoutDays");

                    b.HasKey("RoutineId", "Step", "ToStep");

                    b.ToTable("Routine2Autodash");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("ActionDate");

                    b.Property<int?>("CreatorUserId");

                    b.Property<string>("Description");

                    b.Property<int>("EntityId");

                    b.Property<int>("RoutineId");

                    b.Property<string>("RoutineRoleTitle")
                        .HasMaxLength(1024);

                    b.Property<int>("Step");

                    b.Property<int?>("ToStep");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Routine2Log");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Notice", b =>
                {
                    b.Property<int>("RoutineId");

                    b.Property<int>("FromStep");

                    b.Property<int>("ToStep");

                    b.Property<string>("Key")
                        .HasMaxLength(32);

                    b.Property<string>("Body");

                    b.Property<string>("BodyEmail");

                    b.Property<string>("BodySms");

                    b.Property<string>("ModelSqlQuery");

                    b.Property<string>("Title")
                        .HasMaxLength(512);

                    b.Property<string>("UserIdsSqlQuery");

                    b.HasKey("RoutineId", "FromStep", "ToStep", "Key");

                    b.ToTable("Routine2Notice");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Reminder", b =>
                {
                    b.Property<int>("RoutineId");

                    b.Property<int>("Step");

                    b.Property<string>("Key")
                        .HasMaxLength(32);

                    b.Property<int>("TimeoutDays");

                    b.Property<string>("Body");

                    b.Property<string>("BodyEmail");

                    b.Property<string>("BodySms");

                    b.Property<string>("ModelSqlQuery");

                    b.Property<string>("UserIdsSqlQuery");

                    b.HasKey("RoutineId", "Step", "Key", "TimeoutDays");

                    b.ToTable("Routine2Reminder");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Role", b =>
                {
                    b.Property<int>("RoutineId");

                    b.Property<string>("DashboardEnum")
                        .HasMaxLength(1024);

                    b.Property<int>("SortOrder");

                    b.Property<string>("StepsJson")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("RoutineId", "DashboardEnum");

                    b.ToTable("Routine2Role");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Step", b =>
                {
                    b.Property<int>("RoutineId");

                    b.Property<int>("Step");

                    b.Property<int?>("F1");

                    b.Property<int?>("F2");

                    b.Property<int?>("F3");

                    b.Property<int?>("F4");

                    b.Property<int?>("F5");

                    b.Property<int?>("F6");

                    b.Property<int?>("F7");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.HasKey("RoutineId", "Step");

                    b.ToTable("Routine2Step");
                });

            modelBuilder.Entity("Tochal.Core.Entity.Tochal.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("RoutineFlownDate");

                    b.Property<bool>("RoutineIsDone");

                    b.Property<bool>("RoutineIsFlown");

                    b.Property<bool>("RoutineIsSucceeded");

                    b.Property<int>("RoutineStep");

                    b.Property<DateTime?>("RoutineStepChangeDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankCities", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Banks.BankProvinces", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankEducationalField", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Banks.BankEducationalGrade", "BankEducationalGrade")
                        .WithMany()
                        .HasForeignKey("BankEducationalGradeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Banks.BankEducationalOrientation", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Banks.BankEducationalField", "BankEducationalField")
                        .WithMany()
                        .HasForeignKey("BankEducationalFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Blog.ContentEntity", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Menu.MenuEntity", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Menu.MenuEntity", "MenuTitle")
                        .WithMany()
                        .HasForeignKey("MenuTitleId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Menu.MenuEntity", "SubMenu")
                        .WithMany()
                        .HasForeignKey("SubMenuId");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.EvaluationAnswers", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.EvaluationQuestion", "EvaluationQuestion")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.RoleClaim", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.User", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Banks.BankCities", "BankCities")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Banks.BankProvinces", "BankProvinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Banks.BankUniversityType", "BankUniversityType")
                        .WithMany()
                        .HasForeignKey("UniTypeId");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserClaim", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserLogin", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserRole", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserToken", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Identity.UserUsedPassword", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany("UserUsedPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.NotificationUser", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Payment", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Notice2", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany()
                        .HasForeignKey("RoutineId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Action", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany("Actions")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Autodash", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany("Autodashes")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Log", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Tochal.Core.DomainModels.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Notice", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany("Notices")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Reminder", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany("Reminders")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Role", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany("Roles")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tochal.Core.DomainModels.Entity.Routine2.Routine2Step", b =>
                {
                    b.HasOne("Tochal.Core.DomainModels.Entity.Routine2.Routine2", "Routine")
                        .WithMany("Steps")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
